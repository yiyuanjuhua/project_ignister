# üîå CursorRIPER Œ£ MCP Master Configuration
# Version: 1.1.0
# Enable/disable MCP services by uncommenting @file directives

## üìã MCP Service Integration for CursorRIPER Œ£

This configuration file enables Model Context Protocol (MCP) services
within the CursorRIPER Œ£ framework. Each service is modular and optional.

### üõ†Ô∏è Available Services:

#### Œ¶ - Filesystem Operations
# Provides local file system access and manipulation
# @file .cursor/rules/mcp_filesystem.mdc

#### Œò - GitHub Operations  
# GitHub repository management and collaboration
# Requires: GITHUB_TOKEN environment variable
# @file .cursor/rules/mcp_github.mdc

#### Œõ - Web Search Operations
# Web search capabilities via Brave Search API
# Requires: BRAVE_SEARCH_API_KEY environment variable
# @file .cursor/rules/mcp_websearch.mdc

#### Œ• - Browser Automation Operations
# Puppeteer/Playwright browser automation and testing
# @file .cursor/rules/mcp_puppeteer.mdc

#### Œû - Container Operations
# Docker container and compose management
# Requires: Docker daemon running
# @file .cursor/rules/mcp_docker.mdc

### üìù Configuration Instructions:

1. **Install MCP servers** for desired services:
   ```bash
   # Filesystem (included with Cursor)
   # No installation needed
   
   # GitHub
   npm install -g @modelcontextprotocol/server-github
   
   # Web Search
   npm install -g @modelcontextprotocol/server-brave-search
   
   # Puppeteer
   npm install -g @modelcontextprotocol/server-puppeteer
   # OR Playwright (recommended)
   npm install -g @executeautomation/playwright-mcp-server
   
   # Docker
   npm install -g docker-mcp
   ```

2. **Set environment variables**:
   - `GITHUB_TOKEN`: Personal access token for GitHub
   - `BRAVE_SEARCH_API_KEY`: API key from brave.com/search/api

3. **Uncomment @file directives** above for services you want to enable

4. **Update .cursor/mcp.json** with server configurations (see example below)

### üìã Example mcp.json:

```json
{
  "mcpServers": {
    "filesystem": {
      "command": "npx",
      "args": ["@modelcontextprotocol/server-filesystem"],
      "config": {
        "directories": ["D:\\Cursor Projects\\CursorRIPER.sigma"]
      }
    },
    "github": {
      "command": "npx",
      "args": ["@modelcontextprotocol/server-github"],
      "env": {
        "GITHUB_TOKEN": "${GITHUB_TOKEN}"
      }
    },
    "brave-search": {
      "command": "npx",
      "args": ["@modelcontextprotocol/server-brave-search"],
      "env": {
        "BRAVE_SEARCH_API_KEY": "${BRAVE_SEARCH_API_KEY}"
      }
    },
    "playwright": {
      "command": "npx",
      "args": ["@executeautomation/playwright-mcp-server"]
    },
    "docker": {
      "command": "npx",
      "args": ["docker-mcp"]
    }
  }
}
```

### üîó Service Integration Map:

```
Composite Operations = {
  Œò√óŒû: deploy_from_github(),      # GitHub ‚Üí Docker
  Œõ√óŒò: search_and_clone(),       # Search ‚Üí GitHub  
  Œ•√óŒò: test_and_commit(),        # Test ‚Üí GitHub
  Œ¶√óŒò: sync_local_to_github()    # Files ‚Üí GitHub
}
```

### ‚ö†Ô∏è Important Notes:

- Services are independent and can be enabled/disabled individually
- Missing services gracefully degrade with warnings
- Mode restrictions apply to all MCP operations
- Protection levels enforce security on sensitive operations
- Context tracking maintains state across operations

For detailed service documentation, see:
- `/docs/mcp/` directory for setup guides
- Individual service rule files for operation details
